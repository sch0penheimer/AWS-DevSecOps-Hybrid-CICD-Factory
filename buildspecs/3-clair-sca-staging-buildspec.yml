################################################################################
#  File: buildspecs/3-clair-sca-staging-buildspec.yml
#  Description: Buildspec for the Clair SCA + Staging CodeBuild project.
#  Author: Haitam Bidiouane (@sch0penheimer)
#  Last Modified: 14/09/2025
#
#  Purpose: 
#    This buildspec performs image vulnerability scanning (SCA) using Amazon ECR's built-in
#    integration with Clair to identify security issues in container images before deploying
#    them to the staging environment in ECS via the same buildspec project.
################################################################################

version: 0.2
phases:
  install:
    commands:
      - echo "[$(date '+%Y-%m-%d %H:%M:%S')]: Install Phase begun."
      - echo "Updating package lists:"
      - apt-get update
      - echo "Installing system packages:"
      - apt-get -y install jq python3-pip python3-dev
      - echo "Installing/Upgrading the AWS CLI:"
      - pip3 install --upgrade awscli
      - echo "[$(date '+%Y-%m-%d %H:%M:%S')]: Installation phase completed successfully."
    finally:
      - echo "[$(date '+%Y-%m-%d %H:%M:%S')]: Cleanup of the install phase (always runs)."

  pre_build:
    commands:
      - echo "[$(date '+%Y-%m-%d %H:%M:%S')]: Pre-build phase started."
      - echo "Starting Docker Daemon:"
      - nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://0.0.0.0:2375 --storage-driver=overlay&
      - timeout 15 sh -c "until docker info; do echo .; sleep 1; done"
      - echo "[$(date '+%Y-%m-%d %H:%M:%S')]: Docker daemon ready."
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_REPO_URI

  build:
    commands:
      - echo "[$(date '+%Y-%m-%d %H:%M:%S')]: Build phase started."
      #- Wait for ECR's Clair scan to complete -#
      - |
        stat="IN_PROGRESS"
        while [ "$stat" != "COMPLETE" ]; do
          if [ "$stat" = "FAILED" ] || [ "$stat" = "CANCELLED" ]; then
            echo "ECR scan failed"
            exit 1
          fi
          stat=$(aws ecr describe-image-scan-findings --repository-name $ECR_REPO_NAME --image-id imageTag=$TAG | jq -r '.imageScanStatus.status')
          sleep 5
        done
      - aws ecr describe-image-scan-findings --repository-name $ECR_REPO_NAME --image-id imageTag=$TAG > ecr_scan_result.json

  post_build:
    commands:
      - |
        jq "{ \"messageType\": \"CodeScanReport\", \"reportType\": \"ECR\", \
        \"createdAt\": \"$(date +'%Y-%m-%dT%H:%M:%S.%3NZ')\", \"source_repository\": env.CODEBUILD_SOURCE_REPO_URL, \
        \"source_branch\": env.CODEBUILD_SOURCE_VERSION, \
        \"build_id\": env.CODEBUILD_BUILD_ID, \
        \"source_commitid\": env.CODEBUILD_RESOLVED_SOURCE_VERSION, \
        \"report\": . }" ecr_scan_result.json > payload.json
      - |
        if grep -E 'HIGH|CRITICAL' ecr_scan_result.json; then
          aws lambda invoke --function-name $LAMBDA_FUNCTION_NAME --payload file://payload.json ecr_scan_result.json && echo "LAMBDA_SUCCEEDED" || echo "LAMBDA_FAILED"
          echo "There are critical or high vulnerabilities.. failing the build"
          exit 1
        elif grep -E 'MEDIUM' ecr_scan_result.json; then
          aws lambda invoke --function-name $LAMBDA_FUNCTION_NAME --payload file://payload.json ecr_scan_result.json && echo "LAMBDA_SUCCEEDED" || echo "LAMBDA_FAILED"
        fi
      - echo "[$(date '+%Y-%m-%d %H:%M:%S')]: Deploying to ECS:"
      - aws ecs update-service --cluster $ECS_CLUSTER_NAME --service $ECS_SERVICE_NAME --force-new-deployment
      - printf '[{"name":"%s","imageUri":"%s"}]' $ECS_SERVICE_NAME $ECR_REPO_URI:$TAG > imagedefinitions.json

artifacts:
  type: zip
  files:
    - imagedefinitions.json
    - ecr_scan_result.json
    - payload.json