################################################################################
#  File: buildspecs/4-owasp-zap-buildspec.yml
#  Description: Buildspec for the OWASP ZAP CodeBuild project.
#  Author: Haitam Bidiouane (@sch0penheimer)
#  Last Modified: 14/09/2025
#
#  Purpose: 
#    This buildspec performs Dynamic Application Security Testing (DAST) using OWASP ZAP
#    running ephemerally in the CodeBuild container to identify security vulnerabilities 
#    in the running application in the staging environment before promoting to production.
################################################################################

version: 0.2
env:
  shell: bash
phases:
  install:
    runtime-versions:
      java: corretto11                      ##-- JRE, required for OWASP ZAP, coretto is AWS's distro of OpenJDK --##
      python: 3.9                           ##-- Python Runtime, required for AWS CLI and scripting --##
    commands:
      - echo "[$(date '+%Y-%m-%d %H:%M:%S')] Install Phase begun."
      - echo "Updating package lists:"
      - apt-get update
      - echo "Installing system packages:"
      - apt-get -y install jq python3-pip python3-dev curl
      - echo "Installing/Upgrading the AWS CLI:"
      - pip3 install --upgrade awscli
      - echo "Downloading and installing OWASP ZAP:"
      - cd /tmp
      - wget -q https://github.com/zaproxy/zaproxy/releases/download/v2.16.1/ZAP_2.16.1_Linux.tar.gz
      - tar -xzf ZAP_2.16.1_Linux.tar.gz
      - mv ZAP_2.16.1 /opt/zap
      - chmod +x /opt/zap/zap.sh
      - chmod +x /opt/zap/zap-baseline.py
      - chmod +x /opt/zap/zap-full-scan.py
      - mkdir -p /home/zap/.ZAP
      - chown -R $(whoami) /opt/zap
      - chown -R $(whoami) /home/zap
      - echo "ZAP installation completed."
      - echo "[$(date '+%Y-%m-%d %H:%M:%S')] Installation Phase completed successfully."
  
  pre_build:
    commands:
      - echo "[$(date '+%Y-%m-%d %H:%M:%S')] Pre-build phase started."
      - echo "Verifying staging environment readiness:"
      - echo "Application URL for DAST -> $APPLICATION_URL"
      - |
        echo "Testing staging application accessibility..."
        timeout=300
        counter=0
        while [ $counter -lt $timeout ]; do
          if curl -f --connect-timeout 10 "$APPLICATION_URL" > /dev/null 2>&1; then
            echo "Staging application is accessible"
            break
          fi
          echo "Waiting for staging app to be ready... ($counter/$timeout seconds)"
          sleep 15
          counter=$((counter + 15))
        done
        
        if [ $counter -ge $timeout ]; then
          echo "Staging application not accessible - DAST cannot proceed"
          exit 1
        fi

      - echo "Starting OWASP ZAP daemon:"
      - export DISPLAY=:99
      - Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
      - sleep 2
      - echo "Starting ZAP in daemon mode..."
      - /opt/zap/zap.sh -daemon -host 0.0.0.0 -port 8080 -config api.disablekey=true > /tmp/zap.log 2>&1 &
      - ZAP_PID=$!
      - echo "ZAP PID -> $ZAP_PID"
      - echo "Waiting for ZAP to start..."
      - sleep 30
      - echo "Testing ZAP connectivity:"
      - |
        for i in {1..10}; do
          if curl -f "http://localhost:8080/JSON/core/view/version/" > /dev/null 2>&1; then
            echo "ZAP is ready!"
            break
          else
            echo "Attempt $i: ZAP not ready, waiting..."
            sleep 10
          fi
          if [ $i -eq 10 ]; then
            echo "ZAP failed to start"
            exit 1
          fi
        done
      - curl "http://localhost:8080/JSON/core/view/version/" | jq .
      - echo "[$(date '+%Y-%m-%d %H:%M:%S')] Pre-build Phase completed successfully."


  build:
    commands:
      - echo "[$(date '+%Y-%m-%d %H:%M:%S')] Build phase started."

      - echo "Starting OWASP ZAP Spider Scan:"
      - spider_scanid=$(curl "http://localhost:8080/JSON/spider/action/scan/?url=$APPLICATION_URL&recurse=true" | jq -r '.scan')
      - echo "Spider Scan ID -> $spider_scanid"
      - echo "Waiting for spider scan to complete:"
      - |
        stat=0;
        timeout=600
        counter=0
        while [ "$stat" != "100" ] && [ $counter -lt $timeout ]; do
          stat=$(curl "http://localhost:8080/JSON/spider/view/status/?scanId=$spider_scanid" | jq -r '.status');
          echo "[$(date '+%Y-%m-%d %H:%M:%S')] Spider scan status: $stat%"
          if [ "$stat" = "100" ]; then
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] Spider scan completed successfully."
            break
          fi
          sleep 10;
          counter=$((counter + 10))
        done
        
        if [ $counter -ge $timeout ]; then
          echo "Spider scan timed out"
          exit 1
        fi

      - echo "[$(date '+%Y-%m-%d %H:%M:%S')] Starting OWASP ZAP Active Scan:"
      - active_scanid=$(curl "http://localhost:8080/JSON/ascan/action/scan/?url=$APPLICATION_URL&recurse=true&inScopeOnly=false" | jq -r '.scan')
      - echo "Active Scan ID -> $active_scanid"
      - echo "Waiting for active scan to complete:"
      - |
        stat=0;
        timeout=900
        counter=0
        while [ "$stat" != "100" ] && [ $counter -lt $timeout ]; do
          stat=$(curl "http://localhost:8080/JSON/ascan/view/status/?scanId=$active_scanid" | jq -r '.status');
          echo "[$(date '+%Y-%m-%d %H:%M:%S')] Active scan status: $stat%"
          if [ "$stat" = "100" ]; then
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] Active scan completed successfully."
            break
          fi
          sleep 15;
          counter=$((counter + 15))
        done
        
        if [ $counter -ge $timeout ]; then
          echo "Active scan timed out - proceeding with partial results"
        fi

      - echo "Generating scan report:"
      - curl "http://localhost:8080/OTHER/core/other/jsonreport/" | jq . > zap-scan-results.json
      - echo "[$(date '+%Y-%m-%d %H:%M:%S')] Build Phase completed successfully."

  post_build:
    commands:
      - echo "[$(date '+%Y-%m-%d %H:%M:%S')] Post-build phase started."

      - echo "Analyzing scan results:"
      - high_alerts=$(curl "http://localhost:8080/JSON/alert/view/alertsSummary/?baseurl=$APPLICATION_URL" | jq -r '.alertsSummary.High // 0')
      - medium_alerts=$(curl "http://localhost:8080/JSON/alert/view/alertsSummary/?baseurl=$APPLICATION_URL" | jq -r '.alertsSummary.Medium // 0')
      - low_alerts=$(curl "http://localhost:8080/JSON/alert/view/alertsSummary/?baseurl=$APPLICATION_URL" | jq -r '.alertsSummary.Low // 0')
      - info_alerts=$(curl "http://localhost:8080/JSON/alert/view/alertsSummary/?baseurl=$APPLICATION_URL" | jq -r '.alertsSummary.Informational // 0')
      
      - echo "=== OWASP ZAP DAST Scan Results ==="
      - echo "High severity alerts -> $high_alerts"
      - echo "Medium severity alerts -> $medium_alerts"
      - echo "Low severity alerts -> $low_alerts"
      - echo "Informational alerts -> $info_alerts"
      
      - echo "Preparing Security Hub payload:"
      - |
        jq "{ \"eventType\": \"DevSecOps_Report\", \
        \"pipelineReportType\": \"OWASP-ZAP\", \
        \"generatedAt\": $(date +\"%Y-%m-%dT%H:%M:%S.%3NZ\"), \
        \"buildId\": env.CODEBUILD_BUILD_ID, \
        \"sourceRepository\": env.CODEBUILD_SOURCE_REPO_URL, \
        \"sourceBranch\": env.CODEBUILD_SOURCE_VERSION, \
        \"reportContent\": . }" zap-scan-results.json > payload.json
      
      - echo "Evaluating OWASP ZAP DAST security scan results:"
      - |
        if [ "$high_alerts" != "0" ] && [ "$high_alerts" != "null" ]; then
          echo "- CRITICAL/HIGH vulnerabilities found in DAST scan."
          aws lambda invoke --function-name $LAMBDA_FUNCTION_NAME --payload file://payload.json response.json && echo "Security Hub import: SUCCESS" || echo "Security Hub import: FAILED"
          echo "- Scan results uploaded to Security Hub. Build FAILING due to HIGH severity security violations."
          exit 1
        elif [ "$medium_alerts" != "0" ] && [ "$medium_alerts" != "null" ]; then
          echo "- Medium vulnerabilities found but within acceptable threshold."
          aws lambda invoke --function-name $LAMBDA_FUNCTION_NAME --payload file://payload.json response.json && echo "Security Hub import: SUCCESS" || echo "Security Hub import: FAILED"
          echo "- Medium vulnerabilities reported to Security Hub. Build continuing."
        else
          echo "- No high or medium vulnerabilities found in DAST scan."
          echo "- DAST scan completed successfully."
        fi
        
      ##-- Cleanup --##
      - echo "[$(date '+%Y-%m-%d %H:%M:%S')] Cleaning up staging environment..."
      - |
        echo "Scaling down staging Auto Scaling Group to 0 instances..."
        
        #- Scale down the ASG -#
        aws autoscaling set-desired-capacity \
          --auto-scaling-group-name $ASG_NAME \
          --desired-capacity 0 \
          --region $AWS_DEFAULT_REGION
        
        echo "Staging ASG scaled down to 0 instances"
        echo "Staging environment cleanup initiated"

      - echo "Shutting down ZAP daemon:"
      - curl "http://localhost:8080/JSON/core/action/shutdown/" || true
      - echo "[$(date '+%Y-%m-%d %H:%M:%S')] OWASP ZAP DAST analysis completed."
    finally:
      - echo "[Cleanup] Ensuring ZAP processes are terminated"
      - pkill -f zap.sh || true
      - pkill -f java.*zap || true

artifacts:
  type: zip
  files:
    - zap-scan-results.json
    - payload.json