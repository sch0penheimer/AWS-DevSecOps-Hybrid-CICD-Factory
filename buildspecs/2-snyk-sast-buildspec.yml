################################################################################
#  File: buildspecs/snyk-sast-buildspec.yml
#  Description: Buildspec for the Snyk SAST CodeBuild project.
#  Author: Haitam Bidiouane (@sch0penheimer)
#  Last Modified: 09/14/2025 (DD/MM/YYYY)
#
#  Purpose: 
#    This buildspec performs Static Application Security Testing (SAST) and 
#    container vulnerability scanning using Snyk to identify security issues
#    in application dependencies and container images before pushing to the image registry.
################################################################################

version: 0.2
env:
  shell: bash
phases:
  install:
    commands:
      - echo "[$(date '+%Y-%m-%d %H:%M:%S')] Install Phase begun."
      - echo "Installing Snyk:"
      - npm install -g snyk --unsafe-perm
      - echo "Snyk version -> $(snyk --version)"
      - echo "[$(date '+%Y-%m-%d %H:%M:%S')] Installation Phase completed successfully."

  pre_build:
    commands:
      - echo "[$(date '+%Y-%m-%d %H:%M:%S')] Pre-build phase started"
      - echo "Starting Docker Daemon:"
      - nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://0.0.0.0:2375 --storage-driver=overlay&
      - timeout 15 sh -c "until docker info; do echo .; sleep 1; done"
      - echo "Docker daemon ready."
      - echo "Authenticating with Docker Hub to avoid pull limits:"
      - echo $DOCKERHUB_PASSWORD | docker login --username $DOCKERHUB_USERNAME --password $DOCKERHUB_PASSWORD
      - echo "Docker Hub authentication successful."
      - echo "Logging into ECR:"
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_REPO_URI
      - echo "[$(date '+%Y-%m-%d %H:%M:%S')] Pre-build Phase completed successfully."
  
  build:
    commands:
      - echo "[$(date '+%Y-%m-%d %H:%M:%S')] Build phase started"
      - cd $CODEBUILD_SRC_DIR
      - echo "Building Docker image:"
      - docker build . -t $ECR_REPO_NAME:$CODEBUILD_RESOLVED_SOURCE_VERSION -f $DOCKERFILE_NAME
      - echo "Authenticating with Snyk:"
      - snyk config set api=$SNYK_API_KEY
      - echo "Starting Snyk container scan:"
      - snyk container test $ECR_REPO_NAME:$CODEBUILD_RESOLVED_SOURCE_VERSION --file=$DOCKERFILE_NAME --json --severity-threshold=high > snyk-results.json || echo "Snyk SAST Scan completed with findings"
      - echo "Tagging image for ECR:"
      - docker tag $ECR_REPO_NAME:$CODEBUILD_RESOLVED_SOURCE_VERSION $ECR_REPO_URI:latest
      - echo "[$(date '+%Y-%m-%d %H:%M:%S')] Build Phase completed successfully."

  post_build:
    commands:
      - echo "[$(date '+%Y-%m-%d %H:%M:%S')] Post-build phase started"
      - echo "Wrapping up..."
      - |
        jq "{ \"eventType\": \"DevSecOps_Report\", \
        \"pipelineReportType\": \"SNYK\", \
        \"generatedAt\": $(date +\"%Y-%m-%dT%H:%M:%S.%3NZ\"), \
        \"buildId\": env.CODEBUILD_BUILD_ID, \
        \"sourceRepository\": env.CODEBUILD_SOURCE_REPO_URL, \
        \"sourceBranch\": env.CODEBUILD_SOURCE_VERSION, \
        \"reportContent\": . }" snyk-results.json > payload.json
      
      - echo "Evaluating Snyk SAST security scan results:"
      - |
        if grep -E 'high|critical' payload.json; then
          echo "CRITICAL/HIGH vulnerabilities found."
          echo "Invoking Lambda to send results to Security Hub."
          aws lambda invoke --function-name $LAMBDA_FUNCTION_NAME --payload file://payload.json response.json && echo "Security Hub import: SUCCESS" || echo "Security Hub import: FAILED"
          echo "- Scan results uploaded to Security Hub."
        elif grep -E 'medium|low' payload.json; then
          echo "MEDIUM/LOW vulnerabilities found (acceptable threshold)."
          echo "Invoking Lambda to send results to Security Hub."
          aws lambda invoke --function-name $LAMBDA_FUNCTION_NAME --payload file://payload.json response.json && echo "Security Hub import: SUCCESS" || echo "Security Hub import: FAILED"
        else
          echo "- No vulnerabilities found. No need to invoke Lambda."
        fi
        echo "- Pushing image to ECR:"
        docker push $ECR_REPO_URI:latest
        echo "Image pushed to ECR successfully."

      - echo "Preparing imagedefinitions.json for ECS deployment:"
      - printf '[{"name":"webapp","imageUri":"%s"}]' $ECR_REPO_URI:$CODEBUILD_RESOLVED_SOURCE_VERSION > imagedefinitions.json
      - echo "[$(date '+%Y-%m-%d %H:%M:%S')] Snyk SAST analysis completed"
artifacts:
  type: zip
  files: '**/*'